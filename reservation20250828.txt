//api/reservstions/route.ts
import { NextResponse } from 'next/server';
import mysql from 'mysql2/promise';

export async function POST(request: Request) {
  try {
    const { username, room, seats } = await request.json();

    const connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME
    });

    // Check if any seats are already occupied
    const seatIds = seats.map((s: any) => s.seat);
    const checkQuery = `
      SELECT seat FROM nodelogin.stud_reserv 
      WHERE room = ? AND seat IN (${seatIds.map(() => '?').join(',')}) AND status = 'occupied'
    `;
    
    const [existingSeats] = await connection.execute(checkQuery, [room, ...seatIds]);
    
    if ((existingSeats as any[]).length > 0) {
      connection.end();
      return NextResponse.json({ 
        error: 'Some seats are already occupied',
        occupiedSeats: (existingSeats as any[]).map(row => row.seat)
      }, { status: 400 });
    }

    // Insert new reservations - Fixed to include peroid_time
    const insertQuery = `
      INSERT INTO nodelogin.stud_reserv 
      (username, room, seat, date_in, date_out, peroid_time, status, created_at) 
      VALUES (?, ?, ?, ?, ?, ?, ?, NOW())
    `;

    for (const seat of seats) {
      await connection.execute(insertQuery, [
        username,
        room,
        seat.seat,
        seat.date_in,
        seat.date_out,
        seat.peroid_time || '9:00-12:00', // Default period time if not provided
        seat.status || 'occupied'
      ]);
    }

    connection.end();
    return NextResponse.json({ message: 'Reservations created successfully' });
  } catch (err) {
    console.error('Database error:', err);
    return NextResponse.json({ error: (err as Error).message }, { status: 500 });
  }
}