To connect the `AirplaneSeatBooking` component (which seems to handle seat reservations for computer rooms) with the server-side action `saveReservToDatabase`, you need to ensure that:

1. The form data from the client-side (`/carousel/page.tsx`) is correctly sent to the server-side function.
2. The server-side function processes and validates the data before saving it to the database.

Here’s what might be missing or needs adjustment:

---

### **Missing Connections**

#### 1. Form Submission in `AirplaneSeatBooking`
The client-side component (`/carousel/page.tsx`) does not currently submit form data to the server-side function `saveReservToDatabase`. You need to add a `<form>` element and ensure it uses the `useActionState` hook properly.

#### 2. Data Mapping
The server-side function expects specific fields like `username`, `room`, `seat`, `date_in`, `date_out`, and `status`. However, these fields are not explicitly mapped or passed from the client-side component.

---

### **Steps to Fix**

#### Step 1: Add a Form in `AirplaneSeatBooking`
Wrap the booking table (or relevant section) in a `<form>` element and use the `useActionState` hook to submit data. For example:

```tsx
<form action={formAction} className="p-6 mb-6 rounded-lg bg-blue-50">
  <h3 className="mb-4 text-lg font-semibold text-blue-800">Booking Summary</h3>
  
  {/* Hidden inputs for required fields */}
  <input type="hidden" name="username" value={tableHeader || 'Default'} />
  <input type="hidden" name="room" value={selectedAirplane?.name || ''} />

  {selectedSeats.map((seatId) => (
    <>
      <input key={`${seatId}-date_in`} type="datetime-local" name="date_in" value={dateTimeInputs[seatId]?.dateIn || ''} />
      <input key={`${seatId}-date_out`} type="datetime-local" name="date_out" value={dateTimeInputs[seatId]?.dateOut || ''} />
    </>
  ))}

  {/* Render the rest of the booking table */}
</form>
```

#### Step 2: Update `handleBooking`
Ensure that when a user confirms the booking, the form is submitted. For example:

```tsx
const handleBooking = () => {
  if (selectedSeats.length === 0) return;

  // Trigger form submission
  document.querySelector('form').submit();
};
```

#### Step 3: Update Server-Side Function (`saveReservToDatabase`)
Ensure the server-side function correctly processes and validates the data. For example:

```javascript
export const saveReservToDatabase = async (_, formData) => {
  const rawData = {
    username: formData.get("username"),
    room: formData.get("room"),
    seat: formData.get("seat"), // Add this if needed
    date_in: new Date(formData.get("date_in")),
    date_out: new Date(formData.get("date_out")),
    status: "Reserved", // Default status
  };

  // Validation
  if (!rawData.username || !rawData.room || !rawData.date_in || !rawData.date_out) {
    return { message: "Please fill all the required fields.", inputs: rawData };
  }

  try {
    const dateIn2 = rawData.date_in.toISOString().slice(0, 19).replace('T', ' ');
    const dateOut2 = rawData.date_out.toISOString().slice(0, 19).replace('T', ' ');

    await pool.execute(
      'INSERT INTO stud_reserv (username, room, seat, date_in, date_out, status, created_at) VALUES (?, ?, ?, ?, ?, ?, NOW())',
      [rawData.username, rawData.room, rawData.seat || null, dateIn2, dateOut2, rawData.status]
    );

    return { message: "Reservation Complete.", success: true };
  } catch (error) {
    console.error("Error saving reservation:", error);
    return { message: "An error occurred while processing your request." };
  }
};
```

#### Step 4: Ensure Database Schema Matches
Make sure the `stud_reserv` table in your database has columns for all the fields being inserted (`username`, `room`, `seat`, `date_in`, `date_out`, `status`, etc.).

---

### **Summary of Changes**
1. Add a `<form>` element in the client-side component to submit data.
2. Use hidden inputs or dynamically generate input fields for required data (e.g., `username`, `room`, `date_in`, `date_out`).
3. Update the server-side function to handle and validate the incoming form data.
4. Ensure the database schema matches the data being inserted.

With these changes, the client-side component will correctly send reservation data to the server-side function for processing and storage in the database.

ข้อผิดพลาด `Module not found: Can't resolve '@/lib/reservation'` เกิดขึ้นเนื่องจากระบบไม่สามารถหาไฟล์หรือ module ที่คุณพยายาม import ได้ โดยเฉพาะเมื่อใช้ alias (`@/`) ซึ่งมักจะถูกกำหนดให้เป็น path ของโปรเจคต์ (เช่น `./src/lib/reservation`)

---

### **วิธีแก้ไข**

#### 1. **ตรวจสอบโครงสร้างโฟลเดอร์และไฟล์**
   - เปิดโปรเจคต์ของคุณ และตรวจสอบว่าไฟล์ `reservation.js` หรือ `reservation.ts` มีอยู่ในโฟลเดอร์ `src/lib/` หรือไม่
   - หากไม่มี ให้ย้ายหรือสร้างไฟล์นั้นในตำแหน่งที่ถูกต้อง

โครงสร้างตัวอย่าง:
```
/src
  /lib
    reservation.js (หรือ reservation.ts)
```

---

#### 2. **ตรวจสอบ alias (`@`)**
   - ใน Next.js, alias `@` มักจะถูกกำหนดให้เป็น `./src/` โดยอัตโนมัติ หากคุณใช้โครงสร้างมาตรฐาน
   - หากคุณไม่แน่ใจ ให้ตรวจสอบไฟล์ `tsconfig.json` หรือ `jsconfig.json` (ถ้ามี) เพื่อดูว่า alias ถูกตั้งค่าอย่างไร

ตัวอย่างใน `tsconfig.json`:
```json
{
  "compilerOptions": {
    "baseUrl": "./",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
```

---

#### 3. **แก้ไขการ import**
   - หากโครงสร้างถูกต้องแล้ว ให้ตรวจสอบว่าไฟล์ `reservation.js` มีฟังก์ชัน `saveReservToDatabase` และมีการ export ที่ถูกต้อง

ตัวอย่างใน `src/lib/reservation.js`:
```javascript
export const saveReservToDatabase = async (_, formData) => {
    // เนื้อหาของฟังก์ชัน
};
```

---

#### 4. **หากยังไม่พบไฟล์**
   - หากคุณไม่มีไฟล์ `reservation.js` ใน `src/lib/`, ให้สร้างไฟล์ใหม่และเพิ่มโค้ดต่อไปนี้:

```javascript
// src/lib/reservation.js

import pool from '@/lib/db'; // เชื่อมต่อกับฐานข้อมูล

export const saveReservToDatabase = async (_, formData) => {
    try {
        const rawData = {
            username: formData.get("username"),
            room: formData.get("room"),
            seat: formData.get("seat") || null,
            date_in: new Date(formData.get("date_in")).toISOString().slice(0, 19).replace('T', ' '),
            date_out: new Date(formData.get("date_out")).toISOString().slice(0, 19).replace('T', ' ')
        };

        await pool.execute(
            'INSERT INTO stud_reserv (username, room, seat, date_in, date_out, status, created_at) VALUES (?, ?, ?, ?, ?, "Reserved", NOW())',
            [rawData.username, rawData.room, rawData.seat, rawData.date_in, rawData.date_out]
        );

        return { message: "Reservation Complete.", success: true };
    } catch (error) {
        console.error("Error saving reservation:", error);
        return { message: "An error occurred while processing your request." };
    }
};
```

---

#### 5. **ทดสอบอีกครั้ง**
   - รันโปรเจคต์ใหม่ (`npm run dev` หรือ `yarn dev`) และตรวจสอบว่าไม่มีข้อผิดพลาดเกิดขึ้น

หากคุณยังพบปัญหา โปรดแจ้งรายละเอียดเพิ่มเติมหรือแสดงโครงสร้างโฟลเดอร์ของคุณเพื่อให้ช่วยเหลือได้มากขึ้นครับ!