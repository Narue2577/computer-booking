 <form class="form" method="post" name="login">
      <div class="logo">
      <img src="Swu-eng-removebg-preview.png" height="120px" width="120px">
      </div>
        <h1 class="login-title">Login</h1>
        <input type="text" class="login-input" name="username" placeholder="Username" autofocus="true"/>
        <input type="password" class="login-input" name="password" placeholder="Password"/>
        <input type="submit" value="Login" name="submit" class="login-button"/>
        <p class="link"><a href="registration.php">New Registration</a></p>
  </form>

  body {
    background: #3e4144;
}
.form {
    margin: 50px auto;
    width: 300px;
    padding: 30px 25px;
    background-color: #ff5564;
}
h1.login-title {
    color: #666;
    margin: 0px auto 25px;
    font-size: 25px;
    font-weight: 300;
    text-align: center;
}
.login-input {
    font-size: 15px;
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 25px;
    height: 25px;
    width: calc(100% - 23px);
}
.login-input:focus {
    border-color:#6e8095;
    outline: none;
}
.login-button {
    color: #fff;
    background: #55a1ff;
    border: 0;
    outline: 0;
    width: 100%;
    height: 50px;
    font-size: 16px;
    text-align: center;
    cursor: pointer;
}
.link {
    color: #666;
    font-size: 15px;
    text-align: center;
    margin-bottom: 0px;
}
.link a {
    color: #666;
}
h3 {
    font-weight: normal;
    text-align: center;
}

.logo { 
  width: auto;
  height: auto;
  text-align:center;
}

.logo img {
  display:inline-block;
} 

In Next.js with Tailwind CSS, you can add more styles to your `<body>` element in several ways:

**Method 1: Add Tailwind classes directly**
```jsx
<body className={`${kanit.className} bg-gray-100 min-h-screen flex flex-col`}>
```

**Method 2: Use template literals with multiple classes**
```jsx
<body className={`${kanit.className} bg-slate-50 text-gray-900 antialiased`}>
```

**Method 3: Use the `clsx` or `cn` utility (if you have it)**
```jsx
<body className={cn(kanit.className, "bg-white dark:bg-gray-900 transition-colors")}>
```

**Method 4: Create a variable first**
```jsx
const bodyClasses = `${kanit.className} bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen`;

<body className={bodyClasses}>
```

**Method 5: Array join approach**
```jsx
<body className={[kanit.className, "bg-gray-50", "text-gray-900", "antialiased"].join(" ")}>
```

The most common and clean approach is **Method 1** - just add your Tailwind classes directly in the template literal after the font class.

-- RECOMMENDED SOLUTION: Use MySQL Workbench with Dedicated User

-- Step 1: Open MySQL Workbench and connect to your local MySQL server
-- Default connection: localhost:3306, username: root

-- Step 2: Create a dedicated database and user for your Next.js app
CREATE DATABASE nodelogin;

-- Step 3: Create a dedicated user (more secure than using root)
CREATE USER 'nextjs_user'@'localhost' IDENTIFIED BY 'SecurePass123!';

-- Step 4: Grant permissions to the new user
GRANT ALL PRIVILEGES ON nodelogin.* TO 'nextjs_user'@'localhost';
FLUSH PRIVILEGES;

-- Step 5: Switch to the new database
USE nodelogin;

-- Step 6: Create the users table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Step 7: Verify table creation
DESCRIBE users;

-- Optional: Insert a test user to verify everything works
-- INSERT INTO users (full_name, email, password) 
-- VALUES ('Test User', 'test@example.com', 'hashed_password_here');

Yes, you can use MySQL Workbench instead of XAMPP's phpMyAdmin. Here's the **recommended solution**:## Complete Setup Steps:

### 1. **MySQL Workbench Setup:**
- Open MySQL Workbench
- Connect to `localhost:3306` with username `root`
- Run the SQL commands above

### 2. **Update your `.env.local` file:**
```env
DB_HOST=localhost
DB_USER=nextjs_user
DB_PASSWORD=SecurePass123!
DB_NAME=nodelogin
```

### 3. **You can keep XAMPP running or use standalone MySQL:**
- **Keep XAMPP**: Just use MySQL Workbench for database management instead of phpMyAdmin
- **Or switch to standalone MySQL**: Download MySQL Server separately

### 4. **Test the connection:**
Create a simple test file `test-connection.js`:
```javascript
import pool from './src/lib/db.js';

async function testDB() {
  try {
    const [rows] = await pool.execute('SELECT 1 as test');
    console.log('✅ Database connected:', rows[0]);
  } catch (error) {
    console.error('❌ Connection failed:', error.message);
  }
}

testDB();
```

Run: `node test-connection.js`

### 5. **Why this is better:**
- **Security**: Dedicated user instead of root
- **Clean**: MySQL Workbench is more professional than phpMyAdmin
- **Reliable**: No XAMPP-specific issues
- **Scalable**: Easy to switch to production databases later

This setup will eliminate the authentication error and give you a clean, professional database setup for your Next.js app.

This is a MySQL authentication error. Your database credentials are incorrect. Here are the simple steps to fix it:## Quick Diagnosis Steps:

1. **Check if MySQL is running:**
   ```bash
   # Windows (XAMPP)
   # Open XAMPP Control Panel, start MySQL
   
   # Mac
   brew services start mysql
   
   # Linux
   sudo systemctl start mysql
   ```

2. **Most likely fixes (try in order):**

   **Option A: No password (common with XAMPP)**
   ```env
   DB_PASSWORD=
   ```

   **Option B: Wrong password**
   - Reset it using MySQL Workbench or phpMyAdmin
   - Update `.env.local` with correct password

   **Option C: MySQL authentication method**
   ```sql
   ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_password';
   ```

3. **Quick test:** Try connecting with MySQL Workbench or phpMyAdmin using the same credentials to verify they work.

4. **Create the database and table** once connected:
   ```sql
   CREATE DATABASE nodelogin;
   USE nodelogin;
   CREATE TABLE users (
       id INT AUTO_INCREMENT PRIMARY KEY,
       full_name VARCHAR(100) NOT NULL,
       email VARCHAR(100) UNIQUE NOT NULL,
       password VARCHAR(255) NOT NULL,
       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
   );
   ```

**Most common solution:** If you're using XAMPP, try setting `DB_PASSWORD=` (empty) in your `.env.local` file, as XAMPP's default MySQL installation often has no root password.

Which MySQL setup are you using (XAMPP, WAMP, standalone MySQL, etc.)? This will help me give you the exact steps.

 SOLUTION 1: Fix MySQL Root Password (Most Common)

# Step 1: Open MySQL command line or MySQL Workbench and run:
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_new_password';
FLUSH PRIVILEGES;

# Step 2: Update your .env.local file:
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=your_new_password
DB_NAME=nodelogin

# SOLUTION 2: Create a New MySQL User (Recommended for security)

# Step 1: Login to MySQL as root:
mysql -u root -p

# Step 2: Create new user and database:
CREATE DATABASE nodelogin;
CREATE USER 'nextjs_user'@'localhost' IDENTIFIED BY 'strong_password_123';
GRANT ALL PRIVILEGES ON nodelogin.* TO 'nextjs_user'@'localhost';
FLUSH PRIVILEGES;

# Step 3: Create the users table:
USE nodelogin;
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

# Step 4: Update .env.local:
DB_HOST=localhost
DB_USER=nextjs_user
DB_PASSWORD=strong_password_123
DB_NAME=nodelogin

# SOLUTION 3: Reset MySQL Root Password (if you forgot it)

# For Windows (XAMPP/WAMP):
# 1. Stop MySQL service
# 2. Open command prompt as administrator
# 3. Navigate to MySQL bin folder:
cd C:\xampp\mysql\bin

# 4. Start MySQL without password:
mysqld --skip-grant-tables

# 5. Open new command prompt and connect:
mysql -u root

# 6. Reset password:
USE mysql;
UPDATE user SET authentication_string=PASSWORD('new_password') WHERE User='root' AND Host='localhost';
FLUSH PRIVILEGES;
quit;

# For Mac (with Homebrew):
sudo mysql -u root
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'new_password';

# For Linux:
sudo mysql -u root
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'new_password';

# SOLUTION 4: Quick Test Connection (db.js with better error handling)
import mysql from 'mysql2/promise';

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'nodelogin',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

const pool = mysql.createPool(dbConfig);

// Test connection function
export async function testConnection() {
  try {
    const connection = await pool.getConnection();
    console.log('✅ Database connected successfully!');
    connection.release();
    return true;
  } catch (error) {
    console.error('❌ Database connection failed:', error.message);
    return false;
  }
}

export default pool;

# SOLUTION 5: Environment Variables Checklist

# Make sure your .env.local file is in the ROOT of your project (same level as package.json)
# File structure should be:
# your-project/
# ├── .env.local          ← HERE
# ├── package.json
# ├── src/
# └── ...

# Example .env.local content:
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=yourpassword
DB_NAME=nodelogin

# SOLUTION 6: Common XAMPP/WAMP Issues

# If using XAMPP:
# 1. Make sure MySQL is running in XAMPP Control Panel
# 2. Default XAMPP MySQL has no password for root:
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=nodelogin

# 3. Or set a password in phpMyAdmin:
# - Go to http://localhost/phpmyadmin
# - Click "User accounts"
# - Edit root@localhost
# - Set password

# SOLUTION 7: Test with Simple Script

# Create test-db.js in your project root:
import { testConnection } from './src/lib/db.js';

async function test() {
  const isConnected = await testConnection();
  if (isConnected) {
    console.log('Database is working!');
    process.exit(0);
  } else {
    console.log('Database connection failed!');
    process.exit(1);
  }
}

test();

# Run test:
# node test-db.js

// app/layout.tsx
'use client';

import { useSession } from '@/lib/session';
import Navbar from '@/components/ui/navbar';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const session = useSession();

  return (
    <html>
      <body>
        <Navbar username={session?.username} />
        {children}
      </body>
    </html>
  );
}

// components/ui/navbar.tsx
'use client';

import Link from 'next/link';

export default function Navbar({ username }: { username?: string }) {
  return (
    <nav className="flex items-center justify-between p-4 bg-gray-800 text-white">
      <div className="font-bold">Your App</div>
      <div className="flex items-center gap-4">
        <span className="text-sm">
          {username ? `Welcome, ${username}` : 'Guest'}
        </span>
        {username ? (
          <Link href="/logout">
            <a className="text-blue-400 hover:text-blue-300">
              Logout
            </a>
          </Link>
        ) : (
          <>
            <Link href="/login">
              <a className="text-blue-400 hover:text-blue-300">
                Login
              </a>
            </Link>
            <Link href="/register">
              <a className="text-blue-400 hover:text-blue-300">
                Register
              </a>
            </Link>
          </>
        )}
      </div>
    </nav>
  );
}